#include "../s21_decimal.h"

#test test1
s21_decimal value_2 = {{1, 0, 0, 0x80010000}};
s21_decimal value_1 = {0};
s21_decimal result = {0};
int return_value = s21_truncate(value_2, &result);
ck_assert_int_eq(return_value, 0);
int a1, a2;
s21_from_decimal_to_int(result, &a1);
s21_from_decimal_to_int(value_1, &a2);
ck_assert_int_eq(a1, a2);

#test test2
s21_decimal value_2 = {0};
s21_decimal value_1 = {0};
s21_decimal result = {0};
s21_from_float_to_decimal(0.1111000, &value_2);
int return_value = s21_truncate(value_2, &result);
ck_assert_int_eq(return_value, 0);
int a1, a2;
s21_from_decimal_to_int(result, &a1);
s21_from_decimal_to_int(value_1, &a2);
ck_assert_int_eq(a1, a2);

#test test3
s21_decimal dec1;
dec1.bits[0] = 0b00000000000000000000000011010011;
dec1.bits[1] = 0b00000000000000000000000000000000;
dec1.bits[2] = 0b00000000000000000000000000000000;
dec1.bits[3] = 0b00000000000000010000000000000000;
s21_decimal result;
result.bits[0] = 0b00000000000000000000000000010101;
result.bits[1] = 0b00000000000000000000000000000000;
result.bits[2] = 0b00000000000000000000000000000000;
result.bits[3] = 0b00000000000000000000000000000000;
s21_decimal res1;
s21_truncate(dec1, &res1);
ck_assert_int_eq(res1.bits[0], result.bits[0]);
ck_assert_int_eq(res1.bits[1], result.bits[1]);
ck_assert_int_eq(res1.bits[2], result.bits[2]);
ck_assert_int_eq(res1.bits[3], result.bits[3]);

#test test4
s21_decimal dec1;
dec1.bits[0] = 0b00000000000000000000000010100101;
dec1.bits[1] = 0b00000000000000000000000000000000;
dec1.bits[2] = 0b00000000000000000000000000000000;
dec1.bits[3] = 0b00000000000000010000000000000000;
s21_decimal result;
result.bits[0] = 0b00000000000000000000000000010000;
result.bits[1] = 0b00000000000000000000000000000000;
result.bits[2] = 0b00000000000000000000000000000000;
result.bits[3] = 0b00000000000000000000000000000000;
s21_decimal res1;
s21_truncate(dec1, &res1);
ck_assert_int_eq(res1.bits[0], result.bits[0]);
ck_assert_int_eq(res1.bits[1], result.bits[1]);
ck_assert_int_eq(res1.bits[2], result.bits[2]);
ck_assert_int_eq(res1.bits[3], result.bits[3]);

#test test5
s21_decimal dec1;
dec1.bits[0] = 0b11111111111111111111111111111111;
dec1.bits[1] = 0b11111111111111111111111111111111;
dec1.bits[2] = 0b11111111111111111111111111111111;
dec1.bits[3] = 0b00000000000000010000000000000000;
s21_decimal result;
result.bits[0] = 0b10011001100110011001100110011001;
result.bits[1] = 0b10011001100110011001100110011001;
result.bits[2] = 0b00011001100110011001100110011001;
result.bits[3] = 0b00000000000000000000000000000000;
s21_decimal res1;
s21_truncate(dec1, &res1);
ck_assert_int_eq(res1.bits[0], result.bits[0]);
ck_assert_int_eq(res1.bits[1], result.bits[1]);
ck_assert_int_eq(res1.bits[2], result.bits[2]);
ck_assert_int_eq(res1.bits[3], result.bits[3]);

#test test6
s21_decimal dec1;
dec1.bits[0] = 0b10000000000000000000000010100101;
dec1.bits[1] = 0b00000000000000000000000000000000;
dec1.bits[2] = 0b00000000000000000000000000000000;
dec1.bits[3] = 0b00000000000000100000000000000000;
s21_decimal result;
result.bits[0] = 0b00000001010001111010111000010110;
result.bits[1] = 0b00000000000000000000000000000000;
result.bits[2] = 0b00000000000000000000000000000000;
result.bits[3] = 0b00000000000000000000000000000000;
s21_decimal res1;
s21_truncate(dec1, &res1);
ck_assert_int_eq(res1.bits[0], result.bits[0]);
ck_assert_int_eq(res1.bits[1], result.bits[1]);
ck_assert_int_eq(res1.bits[2], result.bits[2]);
ck_assert_int_eq(res1.bits[3], result.bits[3]);

#test test7
s21_decimal dec1;
dec1.bits[3] = 0x000A0000;
dec1.bits[2] = 0x0;
dec1.bits[1] = 0xFFFFFFFF;
dec1.bits[0] = 0xFFFFFFFF;
s21_decimal result;
result.bits[3] = 0x0;
result.bits[2] = 0x0;
result.bits[1] = 0x0;
result.bits[0] = 0x6DF37F67;
s21_decimal res1;
s21_truncate(dec1, &res1);
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test8
s21_decimal dec1;
dec1.bits[3] = 0b10000000000011000000000000000000;
dec1.bits[2] = 0x0;
dec1.bits[1] = 0xFFFFFFFF;
dec1.bits[0] = 0xFFFFFFFF;
float a1;
s21_from_decimal_to_float(dec1, &a1);
s21_decimal result;
result.bits[3] = 0b10000000000000000000000000000000;
result.bits[2] = 0x0;
result.bits[1] = 0x0;
result.bits[0] = 0x1197998;
s21_decimal res1;
s21_truncate(dec1, &res1);
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test9
s21_decimal dec1;
dec1.bits[3] = 0x80000000;
dec1.bits[2] = 0x0;
dec1.bits[1] = 0xFFFFFFFF;
dec1.bits[0] = 0xFFFFFFFF;
s21_decimal result;
result.bits[3] = 0x80000000;
result.bits[2] = 0x0;
result.bits[1] = 0xFFFFFFFF;
result.bits[0] = 0xFFFFFFFF;
s21_decimal res1;
s21_truncate(dec1, &res1);
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test10
s21_decimal dec1;
dec1.bits[0] = 0b00000000000000000000000001101101;
dec1.bits[1] = 0b00000000000011000110010101011011;
dec1.bits[2] = 0b00000000000000000011000000111001;
dec1.bits[3] = 0b00000000000011100000000000000000;
s21_decimal result;
result.bits[0] = 0b10000111101111000001011000011110;
result.bits[1] = 0b00000000000000000000000000000000;
result.bits[2] = 0b00000000000000000000000000000000;
result.bits[3] = 0b00000000000000000000000000000000;
s21_decimal res1;
s21_truncate(dec1, &res1);
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test11
s21_decimal dec1;
dec1.bits[0] = 0b11011110101001001000000010110110;
dec1.bits[1] = 0b01011111101001011101111110100000;
dec1.bits[2] = 0b00011111111010011010111101100000;
dec1.bits[3] = 0b00000000000010010000000000000000;
s21_decimal result;
result.bits[0] = 0b00110100101011011100000100111110;
result.bits[1] = 0b10001001000100001000011110111001;
result.bits[2] = 0b00000000000000000000000000000000;
result.bits[3] = 0b00000000000000000000000000000000;
s21_decimal res1;
s21_truncate(dec1, &res1);
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test12
s21_decimal dec1;
dec1.bits[3] = 0x80090000;
dec1.bits[2] = 0;
dec1.bits[1] = 0xFFFFEA34;
dec1.bits[0] = 0xFF837E4F;
s21_decimal result;
s21_truncate(dec1, &result);
s21_decimal res1;
res1.bits[3] = 0x80000000;
res1.bits[2] = 0;
res1.bits[1] = 0x4;
res1.bits[0] = 0x4B829C70;
ck_assert_int_eq(res1.bits[3], result.bits[3]);
ck_assert_int_eq(res1.bits[2], result.bits[2]);
ck_assert_int_eq(res1.bits[1], result.bits[1]);
ck_assert_int_eq(res1.bits[0], result.bits[0]);

#test test13
s21_decimal dec1;
dec1.bits[0] = 0b11010000101000110011000001101101;
dec1.bits[1] = 0b00011111100110100110101101011000;
dec1.bits[2] = 0;
dec1.bits[3] = 0b00000000000010010000000000000000;
s21_decimal result;
s21_truncate(dec1, &result);
s21_decimal result_origin;
result_origin.bits[3] = 0;
result_origin.bits[2] = 0;
result_origin.bits[1] = 0;
result_origin.bits[0] = 0b10000111101111000001011000011110;
ck_assert_int_eq(result_origin.bits[3], result.bits[3]);
ck_assert_int_eq(result_origin.bits[2], result.bits[2]);
ck_assert_int_eq(result_origin.bits[1], result.bits[1]);
ck_assert_int_eq(result_origin.bits[0], result.bits[0]);

#test test14
s21_decimal src1, origin;
src1.bits[0] = 0b00000000000000000000000000000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal result = {{0, 0, 0, 0}};
s21_truncate(src1, &result);
origin.bits[0] = 0b00000000000000000000000000000001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
