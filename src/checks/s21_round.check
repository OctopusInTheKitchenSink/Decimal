#include "../s21_decimal.h"

#test test1
s21_decimal value_2 = {0};
s21_decimal result = {0};
s21_from_float_to_decimal(1.7111000, &value_2);
int return_value = s21_round(value_2, &result), result_int = 0;
s21_from_decimal_to_int(result, &result_int);
ck_assert_int_eq(return_value, 0);
ck_assert_int_eq(result_int, 2);

#test test2
s21_decimal dec1;
dec1.bits[0] = 0b10010011111100000001110001010010;
dec1.bits[1] = 0b00000000000000000000000100100000;
dec1.bits[2] = 0b00000000000000000000000000000000;
dec1.bits[3] = 0b00000000000010100000000000000000;
s21_decimal result;
result.bits[0] = 0b00000000000000000000000001111100;
result.bits[1] = 0b00000000000000000000000000000000;
result.bits[2] = 0b00000000000000000000000000000000;
result.bits[3] = 0b00000000000000000000000000000000;
s21_decimal res1;
s21_round(dec1, &res1);
float a1, a2;
s21_from_decimal_to_float(res1, &a1);
s21_from_decimal_to_float(result, &a2);
ck_assert_float_eq(a1, a2);

#test test3
s21_decimal value_2 = {{0xFFFFFFFF, 0, 0xFFFFFFFF, 0x80020000}};
s21_decimal result = {0};
int return_value = s21_round(value_2, &result);
ck_assert_int_eq(return_value, 0);

#test test4
s21_decimal value_2 = {0};
s21_decimal result = {0};
s21_from_float_to_decimal(2.2, &value_2);
int return_value = s21_round(value_2, &result), result_int = 0;
s21_from_decimal_to_int(result, &result_int);
ck_assert_int_eq(return_value, 0);
ck_assert_int_eq(result_int, 2);

#test test5
s21_decimal value_2 = {{15, 0, 0, pow(2, 16)}};
s21_decimal result = {0};
int return_value = s21_round(value_2, &result);
ck_assert_int_eq(return_value, 0);

#test test6
s21_decimal value_2 = {{15, 0, 0, 0x80010000}};
s21_decimal result = {0};
int return_value = s21_round(value_2, &result);
ck_assert_int_eq(return_value, 0);

#test test7
s21_decimal dec1;
dec1.bits[0] = 0b01111111111111111111111111111111;
dec1.bits[1] = 0;
dec1.bits[2] = 0;
dec1.bits[3] = 0;
s21_decimal check;
s21_round(dec1, &check);
ck_assert_int_eq(dec1.bits[0], check.bits[0]);
ck_assert_int_eq(dec1.bits[1], check.bits[1]);
ck_assert_int_eq(dec1.bits[2], check.bits[2]);
ck_assert_int_eq(dec1.bits[3], check.bits[3]);

#test test8
s21_decimal dec1;
dec1.bits[0] = 0b10010011111100000001110001010010;
dec1.bits[1] = 0b00000000000000000000000100100000;
dec1.bits[2] = 0;
dec1.bits[3] = 0b00000000000010100000000000000000;
s21_decimal result = {0};
result.bits[0] = 0b00000000000000000000000001111100;
s21_decimal res1;
s21_round(dec1, &res1);
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test9
s21_decimal dec1 = {0};
dec1.bits[0] = 0b00000000000000000000000010100101;
dec1.bits[1] = 0;
dec1.bits[2] = 0;
dec1.bits[3] = 0b10000000000000010000000000000000;
s21_decimal result;
result.bits[0] = 0b00000000000000000000000000010001;
result.bits[1] = 0;
result.bits[2] = 0;
result.bits[3] = 0b10000000000000000000000000000000;
s21_decimal res1;
s21_round(dec1, &res1);
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test10
s21_decimal dec1;
dec1.bits[0] = 0b11111111111111111111111111111111;
dec1.bits[1] = 0b00000000001111111111111111111111;
dec1.bits[2] = 0;
dec1.bits[3] = 0b00000000000000110000000000000000;
s21_decimal result;

result.bits[0] = 0b01001101110100101111000110101001;
result.bits[1] = 0b00000000000000000001000001100010;
result.bits[2] = 0b00000000000000000000000000000000;
result.bits[3] = 0b00000000000000000000000000000000;
s21_decimal res1;
s21_round(dec1, &res1);
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test11
s21_decimal dec1;
dec1.bits[0] = 0b00000000000011110111001001110100;
dec1.bits[1] = 0b00000000000000000000000000000000;
dec1.bits[2] = 0b00000000000000000000000000000000;
dec1.bits[3] = 0b10000000000000110000000000000000;
s21_decimal result;
result.bits[0] = 0b00000000000000000000001111110100;
result.bits[1] = 0b00000000000000000000000000000000;
result.bits[2] = 0b00000000000000000000000000000000;
result.bits[3] = 0b10000000000000000000000000000000;
s21_decimal res1;
s21_round(dec1, &res1);
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test12
s21_decimal dec1;
dec1.bits[0] = 0b10000000000000000000001111110100;
dec1.bits[1] = 0b00000000000001000000000000000000;
dec1.bits[2] = 0b00000000000000000000000000000000;
dec1.bits[3] = 0b10000000000001110000000000000000;
s21_decimal result;
result.bits[0] = 0b00000110101101011111110101111101;
result.bits[1] = 0b00000000000000000000000000000000;
result.bits[2] = 0b00000000000000000000000000000000;
result.bits[3] = 0b10000000000000000000000000000000;
s21_decimal res1;
s21_round(dec1, &res1);
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test13
s21_decimal dec1;
dec1.bits[0] = 0b10000000000000000000001111110100;
dec1.bits[1] = 0b00000000000000000000000000000000;
dec1.bits[2] = 0b00000000000000000000000000000000;
dec1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal result;
result.bits[0] = 0b10000000000000000000001111110100;
result.bits[1] = 0b00000000000000000000000000000000;
result.bits[2] = 0b00000000000000000000000000000000;
result.bits[3] = 0b00000000000000000000000000000000;
s21_decimal res1;
s21_round(dec1, &res1);
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test14
s21_decimal dec1;
dec1.bits[0] = 0b01100011000011111111111111111111;
dec1.bits[1] = 0b01101011110001110101111000101101;
dec1.bits[2] = 0b00000000000000000000000000000101;
dec1.bits[3] = 0b10000000000010100000000000000000;
s21_decimal result;
result.bits[0] = 0b01010100000010111110010000000000;
result.bits[1] = 0b00000000000000000000000000000010;
result.bits[2] = 0b00000000000000000000000000000000;
result.bits[3] = 0b10000000000000000000000000000000;
s21_decimal res1;
s21_round(dec1, &res1);
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test15
s21_decimal dec1;

dec1.bits[0] = 0b01010101001110101110101110110001;
dec1.bits[1] = 0b00001101101101001101101001011111;
dec1.bits[2] = 0b00000000000000000000000000000000;
dec1.bits[3] = 0b10000000000100100000000000000000;
s21_decimal result;
result.bits[0] = 0b00000000000000000000000000000001;
result.bits[1] = 0b00000000000000000000000000000000;
result.bits[2] = 0b00000000000000000000000000000000;
result.bits[3] = 0b10000000000000000000000000000000;
s21_decimal res1;
s21_round(dec1, &res1);
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test16
s21_decimal dec1;

dec1.bits[0] = 0b10010011111100000001110001010010;
dec1.bits[1] = 0b00000000000000000000000100100000;
dec1.bits[2] = 0b00000000000000000000000000000000;
dec1.bits[3] = 0b00000000000010100000000000000000;
s21_decimal result;
result.bits[0] = 0b00000000000000000000000001111100;
result.bits[1] = 0b00000000000000000000000000000000;
result.bits[2] = 0b00000000000000000000000000000000;
result.bits[3] = 0b00000000000000000000000000000000;
s21_decimal res1;
s21_round(dec1, &res1);
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test17
s21_decimal dec1;

dec1.bits[0] = 0b11001101110001110111110001000000;
dec1.bits[1] = 0b00111110001001010000001001100000;
dec1.bits[2] = 0b00100000010011111100111001011110;
dec1.bits[3] = 0b10000000000001000000000000000000;
s21_decimal result;
result.bits[0] = 0b10100000111111100100111000000100;
result.bits[1] = 0b00011011110011101100110011101101;
result.bits[2] = 0b00000000000000001101001111000010;
result.bits[3] = 0b10000000000000000000000000000000;
s21_decimal res1;
s21_round(dec1, &res1);
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test18
s21_decimal dec1;

dec1.bits[0] = 0b10100000111111100100111000000100;
dec1.bits[1] = 0b00011011110011101100110011101101;
dec1.bits[2] = 0b00000000000000001101001111000010;
dec1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal res1;
s21_round(dec1, &res1);
s21_decimal result;
result.bits[0] = 0b10100000111111100100111000000100;
result.bits[1] = 0b00011011110011101100110011101101;
result.bits[2] = 0b00000000000000001101001111000010;
result.bits[3] = 0b00000000000000000000000000000000;
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test19
s21_decimal dec1;

dec1.bits[0] = 0b10010111011100111001111111111111;
dec1.bits[1] = 0b00111100000010000011000110001101;
dec1.bits[2] = 0b00000000000000000000000000000001;
dec1.bits[3] = 0b00000000000001110000000000000000;
s21_decimal res1;
s21_round(dec1, &res1);
s21_decimal result;
result.bits[0] = 0b00110110101101101000110001000000;
result.bits[1] = 0b00000000000000000000001000010010;
result.bits[2] = 0b00000000000000000000000000000000;
result.bits[3] = 0b00000000000000000000000000000000;
ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);

#test test20
s21_decimal dec1;

dec1.bits[0] = 0b10010111011100111001111111111111;
dec1.bits[1] = 0b00111100000010000011000110001101;
dec1.bits[2] = 0b00000000000000000000000000000001;
dec1.bits[3] = 0b10000000000001110000000000000000;
s21_decimal res1;
s21_round(dec1, &res1);
s21_decimal result;
result.bits[0] = 0b00110110101101101000110001000000;
result.bits[1] = 0b00000000000000000000001000010010;
result.bits[2] = 0b00000000000000000000000000000000;
result.bits[3] = 0b10000000000000000000000000000000;

ck_assert_float_eq(res1.bits[0], result.bits[0]);
ck_assert_float_eq(res1.bits[1], result.bits[1]);
ck_assert_float_eq(res1.bits[2], result.bits[2]);
ck_assert_float_eq(res1.bits[3], result.bits[3]);
