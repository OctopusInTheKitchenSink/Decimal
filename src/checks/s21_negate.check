#include "../s21_decimal.h"

#test test1
int a = 15;
int res_a = 0;
s21_decimal src;
s21_decimal res;
s21_from_int_to_decimal(a, &src);
s21_negate(src, &res);
s21_from_decimal_to_int(res, &res_a);
ck_assert_int_eq(-15, res_a);

#test test2
float a = 10.12345;
float res_a = 0;
s21_decimal src;
s21_decimal res;
s21_from_float_to_decimal(a, &src);
s21_negate(src, &res);
s21_from_decimal_to_float(res, &res_a);
ck_assert_float_eq(-10.12345, res_a);

#test test3
float a = 10.1234e5;
float res_a = 0;
s21_decimal src;
s21_decimal res;
s21_from_float_to_decimal(a, &src);
s21_negate(src, &res);
s21_from_decimal_to_float(res, &res_a);
ck_assert_float_eq(-10.1234e5, res_a);

#test test4
float a = -10.1234e5;
float res_a = 0;
s21_decimal src;
s21_decimal res;
s21_from_float_to_decimal(a, &src);
s21_negate(src, &res);
s21_from_decimal_to_float(res, &res_a);
ck_assert_float_eq(10.1234e5, res_a);

#test test5
int a = -15;
int res_a = 0;
s21_decimal src;
s21_decimal res;
s21_from_int_to_decimal(a, &src);
s21_negate(src, &res);
s21_from_decimal_to_int(res, &res_a);
ck_assert_int_eq(15, res_a);

#test test6
s21_decimal value_2 = {0};
value_2.bits[0] = 1;
value_2.bits[1] = 0;
value_2.bits[2] = 0;
value_2.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_1 = {0};
value_1.bits[0] = 1;
s21_decimal result = {0};
float a1, a2;
s21_from_decimal_to_float(value_1, &a1);
int return_value = s21_negate(value_2, &result);
s21_from_decimal_to_float(result, &a2);/// get
ck_assert_int_eq(return_value, 0);
ck_assert_float_eq(a1, a2);

#test test7
s21_decimal value_2 = {0};
value_2.bits[0] = 1;
value_2.bits[1] = 0;
value_2.bits[2] = 0;
value_2.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_1 = {0};
value_1.bits[0] = 1;
s21_decimal result = {0};
float a1, a2;
s21_from_decimal_to_float(value_2, &a2);
int return_value = s21_negate(value_1, &result);
s21_from_decimal_to_float(result, &a1);
ck_assert_int_eq(return_value, 0);
ck_assert_float_eq(a1, a2);

#test test8
int a = 15;
int res_a = 0;
s21_decimal src;
s21_decimal res;
s21_from_int_to_decimal(a, &src);
s21_negate(src, &res);
s21_from_decimal_to_int(res, &res_a);
ck_assert_int_eq(-15, res_a);

#test test9
float a = 10.12345;
float res_a = 0;
s21_decimal src;
s21_decimal res;
s21_from_float_to_decimal(a, &src);
s21_negate(src, &res);
s21_from_decimal_to_float(res, &res_a);
ck_assert_float_eq(-10.12345, res_a);

#test test10
float a = 10.1234e5;
float res_a = 0;
s21_decimal src;
s21_decimal res;
s21_from_float_to_decimal(a, &src);
s21_negate(src, &res);
s21_from_decimal_to_float(res, &res_a);
ck_assert_float_eq(-10.1234e5, res_a);

#test test11
float a = -10.1234e5;
float res_a = 0;
s21_decimal src;
s21_decimal res;
s21_from_float_to_decimal(a, &src);
s21_negate(src, &res);
s21_from_decimal_to_float(res, &res_a);
ck_assert_float_eq(10.1234e5, res_a);

#test test12
int a = -15;
int res_a = 0;
s21_decimal src;
s21_decimal res;
s21_from_int_to_decimal(a, &src);
s21_negate(src, &res);
s21_from_decimal_to_int(res, &res_a);
ck_assert_int_eq(15, res_a);

#test test13
s21_decimal b = {0};
s21_decimal etalon = {{0, 0, 0, ~(INT_MAX)}};
int negate = s21_negate(b, &etalon);
ck_assert_int_eq(negate, 0);

#test test14
s21_decimal b = {0};
s21_decimal etalon = {{0, 0, 0, ~(INT_MAX)}};
int negate = s21_negate(b, &etalon);
ck_assert_int_eq(negate, 0);

#test test15
s21_decimal a = {{1, 0, 0, 0}};
s21_decimal etalon = {{1, 0, 0, ~(INT_MAX)}};
s21_decimal b = {0};
s21_decimal* ptr_b = &b;
int add = s21_negate(a, ptr_b);
ck_assert_int_eq(add, 0);
int equal = s21_is_equal(b, etalon);
ck_assert_int_eq(equal, 1);

#test test16
s21_decimal a = {{1, 0, 0, ~(INT_MAX)}};
s21_decimal etalon = {{1, 0, 0, 0}};
s21_decimal b = {{0, 0, 0, 0}};
s21_decimal* ptr_b = &b;
int add = s21_negate(a, ptr_b);
ck_assert_int_eq(add, 0);
int equal = s21_is_equal(b, etalon);
ck_assert_int_eq(equal, 1);

#test test17
s21_decimal a = {{100, 0, 0, 0}};
s21_decimal etalon = {{100, 0, 0, ~(INT_MAX)}};
s21_decimal b = {{0, 0, 0, 0}};
s21_decimal* ptr_b = &b;
int add = s21_negate(a, ptr_b);
ck_assert_int_eq(add, 0);
int equal = s21_is_equal(b, etalon);
ck_assert_int_eq(equal, 1);

#test test18
s21_decimal a = {{100, 0, 0, ~(INT_MAX)}};
s21_decimal etalon = {{100, 0, 0, 0}};
s21_decimal b = {{0, 0, 0, 0}};
s21_decimal* ptr_b = &b;
int add = s21_negate(a, ptr_b);
ck_assert_int_eq(add, 0);
int equal = s21_is_equal(b, etalon);
ck_assert_int_eq(equal, 1);
