#include "../s21_decimal.h"

#test test1
float src = 0.00000000000;
float temp = 0;
int return_value = 0;
s21_decimal value_1 = {0};
s21_from_decimal_to_float(value_1, &temp);
if (fabs(src - temp) < pow(10, -7)) return_value = 1;
ck_assert_int_eq(return_value, 1);

#test test2
float src = 0.0001;
float temp = 0;
s21_decimal value_1 = {{1, 0, 0, 0b00000000000001000000000000000000}};
s21_from_decimal_to_float(value_1, &temp);
ck_assert_float_eq_tol(src, temp, 10e-7);

#test test3
float src = 0.0000000000000123;
float temp = 0;
s21_decimal value_1 = {{123, 0, 0, 0b00000000000100000000000000000000}};
s21_from_decimal_to_float(value_1, &temp);
ck_assert_float_eq_tol(src, temp, 10e-7);

#test test4
float src = -0.0001;
float temp = 0;
s21_decimal value_1 = {{1, 0, 0, 0b10000000000001000000000000000000}};
s21_from_decimal_to_float(value_1, &temp);
ck_assert_float_eq_tol(src, temp, 10e-7);

#test test5
s21_decimal src;
int result = 0;
float number = 0.0;
long int c = 2147680256;
src.bits[0] = 18122;
src.bits[1] = 0;
src.bits[2] = 0;
src.bits[3] = c;
result = s21_from_decimal_to_float(src, &number);
ck_assert_float_eq(number, -18.122);
ck_assert_int_eq(result, 0);

#test test6
s21_decimal src;
int result = 0;
float number = 0.0;
long int c = 2147483648;
src.bits[0] = 1812;
src.bits[1] = 0;
src.bits[2] = 0;
src.bits[3] = c;
result = s21_from_decimal_to_float(src, &number);
ck_assert_float_eq(number, -1812);
ck_assert_int_eq(result, 0);

#test test7
s21_decimal src;
int result = 0;
float number = 0.0;
src.bits[0] = 0XFFFFFF;
src.bits[1] = 0;
src.bits[2] = 0;
src.bits[3] = 0;
result = s21_from_decimal_to_float(src, &number);
ck_assert_float_eq(number, 16777215);
ck_assert_int_eq(result, 0);

#test test8
s21_decimal src;
int result = 0;
float number = 0.0;
long int c = 2147745792;
src.bits[0] = 23450987;
src.bits[1] = 0;
src.bits[2] = 0;
src.bits[3] = c;
result = s21_from_decimal_to_float(src, &number);
ck_assert_float_eq(number, -2345.0987);
ck_assert_int_eq(result, 0);

#test test9
s21_decimal src;
int result = 0;
float number = 0.0;
long int c = 4294967295;
src.bits[0] = c;
src.bits[1] = c;
src.bits[2] = 0;
src.bits[3] = 0;
result = s21_from_decimal_to_float(src, &number);
ck_assert_float_eq(number, 0xFFFFFFFFFFFFFFFF);
ck_assert_int_eq(result, 0);

#test test10
float check = 209954630662800494622891468.39;
float res;
s21_decimal src = {{0x3D70A3D7, 0x70A3D70A, 0x43D70A3D, 0x20000}};
s21_from_decimal_to_float(src, &res);
ck_assert_float_eq(check, res);

#test test11
s21_decimal dec;
int result = 0;
float number = 0.0;
long int c = 2147483648;
dec.bits[0] = 1812;
dec.bits[1] = 0;
dec.bits[2] = 0;
dec.bits[3] = c;
result = s21_from_decimal_to_float(dec, &number);
ck_assert_float_eq(number, -1812);
ck_assert_int_eq(result, 0);

#test test12
s21_decimal dec;
int result = 0;
float number = 0.0;
dec.bits[0] = 0XFFFFFF;
dec.bits[1] = 0;
dec.bits[2] = 0;
dec.bits[3] = 0;
result = s21_from_decimal_to_float(dec, &number);
ck_assert_float_eq(number, 16777215);
ck_assert_int_eq(result, 0);

#test test13
s21_decimal dec;
int result = 0;
float number = 0.0;
long int c = 2147745792;
dec.bits[0] = 23450987;
dec.bits[1] = 0;
dec.bits[2] = 0;
dec.bits[3] = c;
result = s21_from_decimal_to_float(dec, &number);
ck_assert_float_eq(number, -2345.0987);
ck_assert_int_eq(result, 0);

#test test14
s21_decimal dec;
int result = 0;
float number = 0.0;
long int c = 4294967295;
dec.bits[0] = c;
dec.bits[1] = c;
dec.bits[2] = 0;
dec.bits[3] = 0;
result = s21_from_decimal_to_float(dec, &number);
ck_assert_float_eq(number, 0xFFFFFFFFFFFFFFFF);
ck_assert_int_eq(result, 0);

#test test15
s21_decimal src1;
float src2;
float *srcp = &src2;
src1.bits[0] = 0b00000000000000000110001101111001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
s21_from_decimal_to_float(src1, srcp);
char var3str[1000];
char result[1000];
snprintf(var3str, sizeof(var3str), "%.6f", 2546.5);
snprintf(result, sizeof(result), "%f", src2);
ck_assert_str_eq(result, var3str);

#test test16
s21_decimal src1;
float src2;
float *srcp = &src2;
src1.bits[0] = 0b00000000000000001011010101110101;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001010000000000000000;
s21_from_decimal_to_float(src1, srcp);
char var3str[1000];
char result[1000];
snprintf(var3str, sizeof(var3str), "%.6f", -0.46453);
snprintf(result, sizeof(result), "%f", src2);
ck_assert_str_eq(result, var3str);
